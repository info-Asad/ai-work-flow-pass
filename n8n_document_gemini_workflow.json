{
  "name": "Document Processing with Gemini AI",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "process-document",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        300
      ],
      "webhookId": "process-document-webhook"
    },
    {
      "parameters": {
        "url": "={{ $json.document_url }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "id": "http-request-fetch",
      "name": "Fetch Document",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "text-condition",
              "leftValue": "={{ $json.headers['content-type'] }}",
              "rightValue": "text/plain",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "check-file-type",
      "name": "Check File Type",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Extract text content from different file types\nconst contentType = $input.all()[0].json.headers['content-type'];\nconst binaryData = $input.all()[0].binary.data;\n\nlet extractedText = '';\n\nif (contentType.includes('text/plain')) {\n  // Plain text file\n  extractedText = binaryData.data.toString('utf8');\n} else if (contentType.includes('application/pdf')) {\n  // For PDF files, we'll pass the binary data to Gemini\n  // Gemini can handle PDF files directly\n  extractedText = 'PDF_BINARY_DATA';\n} else if (contentType.includes('application/vnd.openxmlformats-officedocument.wordprocessingml.document') || \n           contentType.includes('application/msword')) {\n  // Word documents\n  extractedText = 'WORD_BINARY_DATA';\n} else if (contentType.includes('text/html')) {\n  // HTML content\n  extractedText = binaryData.data.toString('utf8');\n} else if (contentType.includes('application/json')) {\n  // JSON content\n  extractedText = binaryData.data.toString('utf8');\n} else {\n  // Try to extract as text\n  try {\n    extractedText = binaryData.data.toString('utf8');\n  } catch (error) {\n    extractedText = 'BINARY_DATA_UNSUPPORTED';\n  }\n}\n\nreturn {\n  extracted_text: extractedText,\n  content_type: contentType,\n  file_size: binaryData.fileSize,\n  file_name: binaryData.fileName,\n  binary_data: binaryData\n};"
      },
      "id": "extract-text",
      "name": "Extract Text Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        900,
        200
      ]
    },
    {
      "parameters": {
        "jsCode": "// Handle binary files that need special processing\nconst binaryData = $input.all()[0].json.binary_data;\nconst contentType = $input.all()[0].json.content_type;\n\nreturn {\n  extracted_text: 'This is a binary file that requires special processing.',\n  content_type: contentType,\n  file_size: binaryData.fileSize,\n  file_name: binaryData.fileName,\n  needs_binary_processing: true\n};"
      },
      "id": "handle-binary",
      "name": "Handle Binary Files",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        900,
        400
      ]
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "contents",
              "value": "={{ [{\"parts\": [{\"text\": \"Please analyze this document and provide a summary:\\n\\n\" + $json.extracted_text}]}] }}"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "gemini-request",
      "name": "Send to Gemini AI",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1140,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Process Gemini response and format output\nconst geminiResponse = $input.all()[0].json;\nconst originalData = $input.all()[1].json;\n\nlet aiResponse = '';\nlet responseStatus = 'success';\n\ntry {\n  if (geminiResponse.candidates && geminiResponse.candidates.length > 0) {\n    aiResponse = geminiResponse.candidates[0].content.parts[0].text;\n  } else {\n    aiResponse = 'No response generated from Gemini AI';\n    responseStatus = 'error';\n  }\n} catch (error) {\n  aiResponse = 'Error processing Gemini response: ' + error.message;\n  responseStatus = 'error';\n}\n\nreturn {\n  status: responseStatus,\n  document_info: {\n    file_name: originalData.file_name,\n    file_size: originalData.file_size,\n    content_type: originalData.content_type\n  },\n  ai_response: aiResponse,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "process-response",
      "name": "Process AI Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1360,
        300
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "webhook-response",
      "name": "Return Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1580,
        300
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"error\": \"Failed to fetch document\", \"message\": $json.error.message } }}"
      },
      "id": "error-response",
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        680,
        500
      ]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Fetch Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Document": {
      "main": [
        [
          {
            "node": "Check File Type",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check File Type": {
      "main": [
        [
          {
            "node": "Extract Text Content",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle Binary Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Text Content": {
      "main": [
        [
          {
            "node": "Send to Gemini AI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Binary Files": {
      "main": [
        [
          {
            "node": "Send to Gemini AI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send to Gemini AI": {
      "main": [
        [
          {
            "node": "Process AI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process AI Response": {
      "main": [
        [
          {
            "node": "Return Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-01-01T00:00:00.000Z",
  "versionId": "1"
}